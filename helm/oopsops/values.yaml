# Global configuration
global:
  storageClass: "csi-rbd-sc"

openai:
  secretName: openai-secret

# Database configuration
postgres:
  image: postgres:alpine
  user: dev_user
  password: dev_pass
  storage: 5Gi

# pgAdmin credentials
pgadmin:
  user:   admin@admin.com
  password: admin

# Document Service configuration
services:
  documentService:
    image: ghcr.io/aet-devops25/team-oopsops/server/document-service:latest
    port: 8091
    replicas: 1
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  authenticationService:
    image: ghcr.io/aet-devops25/team-oopsops/server/authentication-service:latest
    port: 8092
    replicas: 1
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.3
    port: 8080
    replicas: 1
    realm: oopsops
    clientId: oopsops-backend
    clientSecret: backend-secret
    adminClientId: admin-cli
    adminClientSecret: admin-secret
    env:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin

  anonymizationService:
    image: ghcr.io/aet-devops25/team-oopsops/server/anonymization-service:latest
    port: 8094
    replicas: 1
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

  genaiService:
    image:
      repository: ghcr.io/aet-devops25/team-oopsops/genai-service
      tag: latest
      pullPolicy: Always
    type: ClusterIP
    port: 8000
    targetPort: 8000
    replicaCount: 1
    env:
      - name: ANONYMIZATION_SERVICE_URL
        value: http://anonymization-service:8094/api/v1/anonymization

client:
  image: ghcr.io/aet-devops25/team-oopsops/client:latest
  port: 80
  replicas: 1

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  tls: true
  host: test.redactiq.student.k8s.aet.cit.tum.de
  secretName: devops25-tls
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"

