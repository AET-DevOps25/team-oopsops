name: Deploy to Rancher Test (PR branches)

on:
  push:
    branches:
      - '**'

env:
  TAG: ${{ github.sha }}
  CLIENT_IMAGE: ghcr.io/aet-devops25/team-oopsops/client
  DOCUMENT_IMAGE: ghcr.io/aet-devops25/team-oopsops/server/document-service
  ARCHIVE_IMAGE: ghcr.io/aet-devops25/team-oopsops/server/archive-service
  AUTH_IMAGE: ghcr.io/aet-devops25/team-oopsops/server/authentication-service
  GENAI_IMAGE: ghcr.io/aet-devops25/team-oopsops/genai-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GHCR  
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push Client
        run: |
          docker build -t $CLIENT_IMAGE:${{ env.TAG }} ./client
          docker push $CLIENT_IMAGE:${{ env.TAG }}

      - name: Build & push Document Service
        run: |
          docker build -t $DOCUMENT_IMAGE:${{ env.TAG }} -f ./server/document-service/Dockerfile ./server
          docker push $DOCUMENT_IMAGE:${{ env.TAG }}

      - name: Build & push Archive Service
        run: |
          docker build -t $ARCHIVE_IMAGE:${{ env.TAG }} -f ./server/archive-service/Dockerfile ./server
          docker push $ARCHIVE_IMAGE:${{ env.TAG }}

      - name: Build & push Auth Service
        run: |
          docker build -t $AUTH_IMAGE:${{ env.TAG }} -f ./server/authentication-service/Dockerfile ./server
          docker push $AUTH_IMAGE:${{ env.TAG }}

      - name: Build & push GenAI Service
        run: |
          docker build -t $GENAI_IMAGE:${{ env.TAG }} -f ./genai-service/Dockerfile ./genai-service
          docker push $GENAI_IMAGE:${{ env.TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up kubectl  
        uses: azure/setup-kubectl@v3
        with:
          version: v1.27.0

      - name: Load Kubeconfig  
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig
          export KUBECONFIG=$PWD/kubeconfig

      - name: Helm Upgrade  
        run: |
          helm upgrade --install oopsops ./charts/oopsops \
            --namespace oopsops-test \
            --set client.image.tag=${{ env.TAG }} \
            --set documentService.image.tag=${{ env.TAG }} \
            --set archiveService.image.tag=${{ env.TAG }} \
            --set authenticationService.image.tag=${{ env.TAG }} \
            --set genaiService.image.tag=${{ env.TAG }} \
            --wait
