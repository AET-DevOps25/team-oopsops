# ABOUTME: This workflow performs post-deployment validation and health checks on deployed services
# ABOUTME: It verifies that all services are running correctly after deployment to various environments

name: Post-Deployment Validation

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        type: string
      base_url:
        description: 'Base URL of the deployed application'
        required: true
        type: string
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      base_url:
        description: 'Base URL of the deployed application'
        required: true
        type: string

jobs:
  health-checks:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: "Frontend"
            endpoint: ""
            expected_status: 200
          - name: "Document Service"
            endpoint: "/api/documents/health"
            expected_status: 200
          - name: "Authentication Service"
            endpoint: "/api/auth/health"
            expected_status: 200
          - name: "Anonymization Service"
            endpoint: "/api/anonymization/health"
            expected_status: 200
          - name: "GenAI Service"
            endpoint: "/api/genai/health"
            expected_status: 200
    
    steps:
      - name: Health check for ${{ matrix.service.name }}
        run: |
          echo "Checking health of ${{ matrix.service.name }}..."
          
          url="${{ inputs.base_url }}${{ matrix.service.endpoint }}"
          echo "Testing URL: $url"
          
          # Retry logic for health checks
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts"
            
            response=$(curl -s -o /dev/null -w "%{http_code}" "$url" || echo "000")
            
            if [ "$response" = "${{ matrix.service.expected_status }}" ]; then
              echo "✅ ${{ matrix.service.name }} is healthy (HTTP $response)"
              echo "HEALTH_STATUS=healthy" >> $GITHUB_ENV
              break
            else
              echo "❌ ${{ matrix.service.name }} returned HTTP $response, expected ${{ matrix.service.expected_status }}"
              
              if [ $attempt -eq $max_attempts ]; then
                echo "HEALTH_STATUS=unhealthy" >> $GITHUB_ENV
                echo "::warning::${{ matrix.service.name }} health check failed after $max_attempts attempts"
              else
                echo "Retrying in 10 seconds..."
                sleep 10
              fi
            fi
            
            attempt=$((attempt + 1))
          done

      - name: Record health check result
        run: |
          echo "## Health Check Result for ${{ matrix.service.name }}" >> $GITHUB_STEP_SUMMARY
          if [ "$HEALTH_STATUS" = "healthy" ]; then
            echo "✅ Service is healthy and responding correctly" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Service failed health check" >> $GITHUB_STEP_SUMMARY
          fi

  functional-tests:
    runs-on: ubuntu-latest
    needs: health-checks
    continue-on-error: true
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python for API testing
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install testing dependencies
        run: |
          pip install requests pytest pytest-html

      - name: Run API functional tests
        continue-on-error: true
        env:
          BASE_URL: ${{ inputs.base_url }}
          ENVIRONMENT: ${{ inputs.environment }}
        run: |
          # Create a simple functional test script
          cat > functional_tests.py << EOF
          import requests
          import pytest
          import os
          
          BASE_URL = os.getenv('BASE_URL', 'http://localhost')
          
          def test_frontend_loads():
              response = requests.get(BASE_URL)
              assert response.status_code in [200, 301, 302]
          
          def test_api_endpoints_respond():
              endpoints = [
                  '/api/documents/health',
                  '/api/auth/health', 
                  '/api/anonymization/health'
              ]
              
              for endpoint in endpoints:
                  try:
                      response = requests.get(f"{BASE_URL}{endpoint}", timeout=10)
                      assert response.status_code in [200, 401, 403]  # Accept auth errors as "responding"
                  except requests.exceptions.RequestException:
                      pytest.fail(f"Endpoint {endpoint} is not responding")
          
          if __name__ == "__main__":
              pytest.main([__file__, "--html=functional_test_report.html", "--self-contained-html"])
          EOF
          
          python functional_tests.py || true

      - name: Upload functional test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: functional-test-results-${{ inputs.environment }}
          path: |
            functional_test_report.html
          retention-days: 7

  performance-check:
    runs-on: ubuntu-latest
    needs: health-checks
    continue-on-error: true
    
    steps:
      - name: Basic performance check
        run: |
          echo "Running basic performance checks..."
          
          # Test response times
          endpoints=(
            "${{ inputs.base_url }}"
            "${{ inputs.base_url }}/api/documents/health"
            "${{ inputs.base_url }}/api/auth/health"
          )
          
          echo "## Performance Check Results" >> $GITHUB_STEP_SUMMARY
          echo "| Endpoint | Response Time | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing: $endpoint"
            
            response_time=$(curl -s -o /dev/null -w "%{time_total}" "$endpoint" || echo "timeout")
            status_code=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint" || echo "000")
            
            if [ "$response_time" != "timeout" ] && [ "$status_code" = "200" ]; then
              if (( $(echo "$response_time < 2.0" | bc -l) )); then
                echo "| $endpoint | ${response_time}s | ✅ Good |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| $endpoint | ${response_time}s | ⚠️ Slow |" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "| $endpoint | N/A | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          done

  validation-summary:
    runs-on: ubuntu-latest
    needs: [health-checks, functional-tests, performance-check]
    if: always()
    
    steps:
      - name: Generate validation summary
        run: |
          echo "## Post-Deployment Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base URL:** ${{ inputs.base_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check results of all validation jobs
          health_status="${{ needs.health-checks.result }}"
          functional_status="${{ needs.functional-tests.result }}"
          performance_status="${{ needs.performance-check.result }}"
          
          echo "| Validation Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "$health_status" = "success" ]; then
            echo "| Health Checks | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Health Checks | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$functional_status" = "success" ]; then
            echo "| Functional Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Functional Tests | ⚠️ Issues Found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$performance_status" = "success" ]; then
            echo "| Performance Check | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Performance Check | ⚠️ Issues Found |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** All validations run with continue-on-error to provide complete feedback." >> $GITHUB_STEP_SUMMARY
