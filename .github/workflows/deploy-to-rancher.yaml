name: Build, Push & Deploy

on:
  pull_request:
    branches: ["**"]
  push:
    branches:
      - main
      - feature/cicd
  workflow_dispatch:

env:
  REPO_OWNER: aet-devops25
  CLIENT_IMAGE: ghcr.io/aet-devops25/team-oopsops/client
  DOCUMENT_IMAGE: ghcr.io/aet-devops25/team-oopsops/server/document-service
  ANONYMIZATION_IMAGE: ghcr.io/aet-devops25/team-oopsops/server/anonymization-service
  AUTHENTICATION_IMAGE: ghcr.io/aet-devops25/team-oopsops/server/authentication-service
  GENAI_IMAGE: ghcr.io/aet-devops25/team-oopsops/genai-service
  CLIENT_DIR: ./client
  DOCUMENT_DIR: ./server/document-service
  ANONYMIZATION_DIR: ./server/anonymization-service
  AUTHENTICATION_DIR: ./server/authentication-service
  GENAI_DIR: ./genai-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set image tag
        run: echo "TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Client Image
        run: |
          docker build -t ${{ env.CLIENT_IMAGE }}:$TAG -t ${{ env.CLIENT_IMAGE }}:latest ${{ env.CLIENT_DIR }}
          docker push ${{ env.CLIENT_IMAGE }}:$TAG
          docker push ${{ env.CLIENT_IMAGE }}:latest

      - name: Build and Push Document Service Image
        run: |
          docker build -t ${{ env.DOCUMENT_IMAGE }}:$TAG -t ${{ env.DOCUMENT_IMAGE }}:latest -f ${{ env.DOCUMENT_DIR }}/Dockerfile ./server
          docker push ${{ env.DOCUMENT_IMAGE }}:$TAG
          docker push ${{ env.DOCUMENT_IMAGE }}:latest

      - name: Build and Push Anonymization Service Image
        run: |
          docker build -t ${{ env.ANONYMIZATION_IMAGE }}:$TAG -t ${{ env.ANONYMIZATION_IMAGE }}:latest -f ${{ env.ANONYMIZATION_DIR }}/Dockerfile ./server
          docker push ${{ env.ANONYMIZATION_IMAGE }}:$TAG
          docker push ${{ env.ANONYMIZATION_IMAGE }}:latest

      - name: Build and Push Authentication Service Image
        run: |
          docker build -t ${{ env.AUTHENTICATION_IMAGE }}:$TAG -t ${{ env.AUTHENTICATION_IMAGE }}:latest -f ${{ env.AUTHENTICATION_DIR }}/Dockerfile ./server
          docker push ${{ env.AUTHENTICATION_IMAGE }}:$TAG
          docker push ${{ env.AUTHENTICATION_IMAGE }}:latest

      - name: Build and Push GenAI Service Image
        run: |
          docker build -t ${{ env.GENAI_IMAGE }}:$TAG -t ${{ env.GENAI_IMAGE }}:latest -f ${{ env.GENAI_DIR }}/Dockerfile ${{ env.GENAI_DIR }}
          docker push ${{ env.GENAI_IMAGE }}:$TAG
          docker push ${{ env.GENAI_IMAGE }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/cicd')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set image tag
        run: echo "TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set up kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.30.1

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Ensure namespace exists
        run: kubectl get ns oopsops-test || kubectl create ns oopsops-test

      - name: Create OpenAI API key secret
        run: |
          kubectl create secret generic openai-secret \
            --namespace oopsops-test \
            --from-literal=OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -
      
      - name: Deploy using Helm
        run: |
          helm upgrade --install oopsops-app ./helm/oopsops \
            --namespace oopsops-test